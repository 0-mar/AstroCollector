services:
  database:
    image: docker.io/postgres:17
    container_name: ac-database
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ac
    volumes:
      - database:/var/lib/postgresql/data/

  redis:
    image: docker.io/redis:8
    networks:
      - ac

  api:
    build:
      context: ../ac-backend
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    container_name: ac-api
    command: ["/app/entrypoint.sh"]
    ports:
      - "${API_PORT}:8082"
    networks:
      - ac
    depends_on:
      database:
        condition: service_healthy

    volumes:
      - plugins:/app/plugins  # the celery worker needs to access the plugin scripts directory
      - temp:/app/temp  # the celery worker needs to access the temp directory
      - "${SERVER_LOGS_DIRECTORY}:/app/logs"

  celery_worker:
    build:
      context: ../ac-backend
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    command: [ "celery", "-A", "src.core.celery.worker", "worker" ]
    depends_on:
      - redis
    networks:
      - ac
    volumes:
      - plugins:/app/plugins:ro
      - temp:/app/temp  # the celery worker needs to access the temp directory
      - "${SERVER_LOGS_DIRECTORY}:/app/logs"

  celery_beat:
    build:
      context: ../ac-backend
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    command: [ "celery", "-A", "src.core.celery.worker", "beat" ]
    depends_on:
      - redis
    networks:
      - ac
    volumes:
      - temp:/app/temp  # the celery beat needs to access the temp directory
      - "${SERVER_LOGS_DIRECTORY}:/app/logs"

  frontend:
    build:
      context: ../ac-frontend
      args:
        PRODUCTION: ${PRODUCTION}

    container_name: ac-frontend
    ports:
      - "${WEB_PORT}:80"
    networks:
      - ac
    depends_on:
      - api

networks:
  ac:

volumes:
  database:
  plugins:
  temp:
