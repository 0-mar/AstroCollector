/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as CatalogsRouteImport } from './routes/catalogs'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as AdminCatalogManagementRouteImport } from './routes/admin/catalogManagement'
import { Route as AdminCatalogHelpRouteImport } from './routes/admin/catalogHelp'

const CatalogsRoute = CatalogsRouteImport.update({
  id: '/catalogs',
  path: '/catalogs',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminCatalogManagementRoute = AdminCatalogManagementRouteImport.update({
  id: '/admin/catalogManagement',
  path: '/admin/catalogManagement',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminCatalogHelpRoute = AdminCatalogHelpRouteImport.update({
  id: '/admin/catalogHelp',
  path: '/admin/catalogHelp',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/catalogs': typeof CatalogsRoute
  '/admin/catalogHelp': typeof AdminCatalogHelpRoute
  '/admin/catalogManagement': typeof AdminCatalogManagementRoute
  '/login': typeof LoginIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/catalogs': typeof CatalogsRoute
  '/admin/catalogHelp': typeof AdminCatalogHelpRoute
  '/admin/catalogManagement': typeof AdminCatalogManagementRoute
  '/login': typeof LoginIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/catalogs': typeof CatalogsRoute
  '/admin/catalogHelp': typeof AdminCatalogHelpRoute
  '/admin/catalogManagement': typeof AdminCatalogManagementRoute
  '/login/': typeof LoginIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/catalogs'
    | '/admin/catalogHelp'
    | '/admin/catalogManagement'
    | '/login'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/catalogs'
    | '/admin/catalogHelp'
    | '/admin/catalogManagement'
    | '/login'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/catalogs'
    | '/admin/catalogHelp'
    | '/admin/catalogManagement'
    | '/login/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  CatalogsRoute: typeof CatalogsRoute
  AdminCatalogHelpRoute: typeof AdminCatalogHelpRoute
  AdminCatalogManagementRoute: typeof AdminCatalogManagementRoute
  LoginIndexRoute: typeof LoginIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/catalogs': {
      id: '/catalogs'
      path: '/catalogs'
      fullPath: '/catalogs'
      preLoaderRoute: typeof CatalogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/catalogManagement': {
      id: '/admin/catalogManagement'
      path: '/admin/catalogManagement'
      fullPath: '/admin/catalogManagement'
      preLoaderRoute: typeof AdminCatalogManagementRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/catalogHelp': {
      id: '/admin/catalogHelp'
      path: '/admin/catalogHelp'
      fullPath: '/admin/catalogHelp'
      preLoaderRoute: typeof AdminCatalogHelpRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  CatalogsRoute: CatalogsRoute,
  AdminCatalogHelpRoute: AdminCatalogHelpRoute,
  AdminCatalogManagementRoute: AdminCatalogManagementRoute,
  LoginIndexRoute: LoginIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
