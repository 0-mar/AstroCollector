# from sqlalchemy import Column, String
# from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
# from sqlalchemy.orm import declarative_base, sessionmaker
#
# from src.core.config.config import settings
#
# # Create async engine
# engine = create_async_engine(settings.DATABASE_URL, echo=True, future=True)
#
# # Create async session factory
# async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
#
# # Create declarative base for models
# Base = declarative_base()
# class DbEntity(Base):
#     id = Column(String, primary_key=True, index=True)
#
# async def get_session() -> AsyncSession:
#     """Dependency for getting async database session.
#
#     Yields:
#         AsyncSession: Async database session
#     """
#     async with async_session() as session:
#         try:
#             yield session
#         finally:
#             await session.close()


import contextlib
from typing import Any, AsyncIterator, Optional, AsyncGenerator
from uuid import UUID

from sqlalchemy import func, create_engine
from sqlalchemy.ext.asyncio import (
    AsyncConnection,
    AsyncSession,
    async_sessionmaker,
    create_async_engine,
    AsyncEngine,
)
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmaker

from src.core.config.config import settings
from src.core.database.exception import DatabaseSessionManagerException


# TODO: should the UUID be generated by the DB, or our app?
class DbEntity(DeclarativeBase):
    __abstract__ = True

    id: Mapped[UUID] = mapped_column(
        primary_key=True, server_default=func.gen_random_uuid()
    )


# async session:
# https://docs.sqlalchemy.org/en/20/orm/extensions/asyncio.html
# Heavily inspired by https://praciano.com.br/fastapi-and-async-sqlalchemy-20-with-pytest-done-right.html
class AsyncDatabaseSessionManager:
    def __init__(self, host: str, engine_kwargs: dict[str, Any] = {}):
        self._engine: Optional[AsyncEngine] = create_async_engine(host, **engine_kwargs)
        self._sessionmaker: Optional[async_sessionmaker[AsyncSession]] = (
            async_sessionmaker(autocommit=False, bind=self._engine)
        )

    async def close(self) -> None:
        if self._engine is None:
            raise DatabaseSessionManagerException(
                "DatabaseSessionManager is not initialized"
            )
        await self._engine.dispose()

        self._engine = None
        self._sessionmaker = None

    @contextlib.asynccontextmanager
    async def connect(self) -> AsyncIterator[AsyncConnection]:
        if self._engine is None:
            raise DatabaseSessionManagerException(
                "DatabaseSessionManager is not initialized"
            )

        async with self._engine.begin() as connection:
            try:
                yield connection
            except Exception:
                await connection.rollback()
                raise

    @contextlib.asynccontextmanager
    async def session(self) -> AsyncIterator[AsyncSession]:
        if self._sessionmaker is None:
            raise DatabaseSessionManagerException(
                "DatabaseSessionManager is not initialized"
            )

        session = self._sessionmaker()
        try:
            yield session
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()


async_sessionmanager = AsyncDatabaseSessionManager(settings.ASYNC_DATABASE_URL)


# Dependencies with yield - extra steps after finishing (session is automatically closed after the request finishes)
# https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-with-yield
async def get_async_db_session() -> AsyncGenerator[AsyncSession, Any]:
    async with async_sessionmanager.session() as session:
        yield session


class DatabaseSessionManager:
    def __init__(self, host: str):
        self._engine = create_engine(host)
        self._sessionmaker = sessionmaker(autocommit=False, bind=self._engine)

    def session(self):
        if self._sessionmaker is None:
            raise DatabaseSessionManagerException(
                "DatabaseSessionManager is not initialized"
            )

        session = self._sessionmaker()
        try:
            yield session
        except Exception:
            session.rollback()
            raise
        finally:
            session.close()


# sessionmanager = DatabaseSessionManager(settings.SYNC_DATABASE_URL)

# Dependencies with yield - extra steps after finishing (session is automatically closed after the request finishes)
# https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-with-yield
# async def get_db_session():
#    with sessionmanager.session() as session:
#        yield session
